<?php

module_load_include('inc', 'cdkey');
module_load_include('forms.inc', 'cdkey');

/**
 * Implements hook_permission().
 */
function cdkey_permission() {
  $perms = array(
    'cdkey type administer' => array(
      'title' => t('CDKey type Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey administer' => array(
      'title' => t('CDKey Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey use administer' => array(
      'title' => t('CDKey use Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey use' => array(
      'title' => t('use CDKey')
    )
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function cdkey_menu() {
  $items = array();
  $items['cdkey/%cdkey'] = array(
    'title callback' => 'cdkey_use_title',
    'title arguments' => array(NULL, 1),
    'page callback' => 'cdkey_use_page',
    'page arguments' => array(NULL, 1),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'cdkey.pages.inc'
  );
  $items['cdkey/%cdkey/%cdkey_use'] = array(
  );
  $items['cdkey/use/%cdkey_type'] = array(
    'title callback' => 'cdkey_use_title',
    'title arguments' => array(2),
    'page callback' => 'cdkey_use_page',
    'page arguments' => array(2),
    'access arguments' => array('cdkey use'),
    'type' => MENU_CALLBACK,
    'file' => 'cdkey.pages.inc'
  );

  $items['cdkey/confirm/%cdkey_sn'] = array(
    'title callback' => 'cdkey_confirm_title',
    'title arguments' => array(2),
    'page callback' => 'cdkey_confirm_page',
    'page arguments' => array(2),
    'access arguments' => array('cdkey use'),
    'type' => MENU_CALLBACK,
    'file' => 'cdkey.pages.inc'
  );

  // Media settings.
  $items['admin/cdkey/add'] = array(
    'title' => 'Add CDKey',
    'description' => 'Add CDKey content.',
    'position' => 'left',
    'weight' => -10,
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'cdkey_add_page',
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
  );
  cdkey_type_cache_reset();
  foreach (cdkey_type_get_types() as $cdkey_type) {
    $items['admin/cdkey/add/' . $cdkey_type->type] = array(
      'title' => $cdkey_type->name,
      'description' => $cdkey_type->description,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cdkey_form', 3),
      'access arguments' => array('cdkey administer'),
      'file' => 'cdkey.admin.inc',
      'type' => MENU_LOCAL_ACTION// MENU_NORMAL_ITEM
    );
  }
  $items['admin/cdkey/%cdkey'] = array(
    'title' => 'Edit CDKey',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_form', NULL, 2),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/cdkey/%cdkey/delete'] = array(
    'title' => 'Delete CDKey',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_delete_form', 2),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $structure_path = 'admin/structure/cdkey';
  $items[$structure_path] = array(
    'title' => 'CDKey types',
    'description' => 'Manage CDKey types',
    'page callback' => 'cdkey_overview_types',
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.types.inc',
  );

  $items[$structure_path . '/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$structure_path . '/add'] = array(
    'title' => 'Add CDKey type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_type_form'),
    'access arguments' => array('cdkey type administer'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'cdkey.types.inc',
  );

  $items[$structure_path . '/manage/%cdkey_type'] = array(
    'title' => 'Edit CDKey type',
    'title callback' => 'inline_entity_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_type_form', 4),
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.types.inc',
  );
  $items[$structure_path . '/manage/%cdkey_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$structure_path . '/manage/%cdkey_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('cdkey_type_form_delete_confirm', 4),
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.types.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function cdkey_menu_alter(&$items) {
  $items['admin/structure/cdkey/manage/%cdkey_type/use/fields']['title'] = 'Use fields';
  $items['admin/structure/cdkey/manage/%cdkey_type/use/fields']['weight'] = 3;
  $items['admin/structure/cdkey/manage/%cdkey_type/use/display']['title'] = 'Use display';
  $items['admin/structure/cdkey/manage/%cdkey_type/use/display']['weight'] = 4;
}

/**
 * Implements hook_views_api().
 */
function cdkey_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cdkey') . '/includes/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function cdkey_entity_info() {
  $info = array();
  $info['cdkey'] = array(
    'label' => t('CDKey'),
    'base table' => 'cdkey',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'sn',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
      ),
      'use' => array(
        'label' => t('Use'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
      'administer' => array(
        'label' => t('Administer'),
        'custom settings' => FALSE,
      ),
    ),
    'entity class' => 'CDKey',
    'controller class' => 'CDKeyController',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'module' => 'code',
  );
  $info['cdkey_use'] = array(
    'label' => t('CDKey Use'),
    'base table' => 'cdkey_use',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'sn',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
    'entity class' => 'CDKeyUse',
    'controller class' => 'CDKeyUseController',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'module' => 'code',
  );
  foreach (cdkey_type_get_names() as $type => $name) {
    $info['cdkey']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/cdkey/manage/%cdkey_type',
        'real path' => 'admin/structure/cdkey/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('cdkey type administer'),
      ),
    );
    $info['cdkey_use']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/cdkey/manage/%cdkey_type/use',
        'bundle argument' => 4,
        'real path' => 'admin/structure/cdkey/manage/' . str_replace('_', '-', $type) . '/use',
        'access arguments' => array('cdkey type administer'),
      ),
    );
  }
  return $info;
}

/**
 * Implements hook_entity_load().
 */
function cdkey_entity_load(&$entities, $entityType) {
  if ($entityType == 'cdkey_use') {
    
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function cdkey_field_extra_fields() {
  $return = array();
  foreach (cdkey_type_get_types() as $cdkey_type) {
    $return['cdkey'][$cdkey_type->type] = array(
      'form' => array(
        'sn' => array(
          'label' => t('CDKey serial-number'),
          'weight' => -5
        ),
        'pass' => array(
          'label' => t('CDKey password'),
          'weight' => -4
        )
      ),
      'display' => array(
        'sn' => array(
          'label' => t('CDKey serial-number'),
          'weight' => -5
        ),
        'pass' => array(
          'label' => t('CDKey password'),
          'weight' => -4
        )
      )
    );
    $return['cdkey_use'][$cdkey_type->type] = array(
      'form' => array(
        'sn' => array(
          'label' => t('CDKey serial-number'),
          'weight' => -5
        ),
        'pass' => array(
          'label' => t('CDKey password'),
          'weight' => -4
        )
      ),
      'display' => array(
        'sn' => array(
          'label' => t('CDKey serial-number'),
          'weight' => -5
        ),
        'pass' => array(
          'label' => t('CDKey password'),
          'weight' => -4
        )
      )
    );
  }
  return $return;
}

function cdkey_cdkey_use_view_alter($build, $entity_ype) {
  if ($entity_ype == 'cdkey_use') {
    
  }
}

/**
 * Implements hook_theme().
 */
function cdkey_theme() {
  return array(
    'cdkey_use' => array(
      'render element' => 'elements',
      'template' => 'cdkey_use',
      'variables' => array('cdkey' => NULL, 'cdkey_type' => NULL, 'cdkey_use_form' => NULL)
    ),
    'cdkey_admin_overview' => array(
      'variables' => array('name' => NULL, 'type' => NULL),
      'file' => 'cdkey.types.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function cdkey_block_info() {
  $blocks = array();
  return $blocks;
}

function cdkey_load($id, $reset = FALSE) {
  if (is_object($id) && empty($reset)) {
    return $id;
  } elseif ($reset) {
    $id = $id->id;
  }
  $entities = cdkey_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

function cdkey_sn_load($sn) {
  return cdkey_load_by_sn($sn);
}

function cdkey_load_by_sn($sn, $pass = FALSE) {
  $conditions = array('sn' => $sn);
  if (!empty($pass)) {
    $conditions['pass'] = $pass;
  }
  $entities = cdkey_load_multiple(FALSE, $conditions);
  return empty($entities) ? FALSE : reset($entities);
}

function cdkey_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($ids) && empty($conditions)) {
    return FALSE;
  }
  return entity_load('cdkey', $ids, $conditions, $reset);
}

function cdkey_save($entity) {
  $transaction = db_transaction();
  $entity->uid = $GLOBALS['user']->uid;
  $entity->created = REQUEST_TIME;
  try {
    module_invoke_all('cdkey_save', $entity);
    return entity_save('cdkey', $entity);
  } catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('cdkey', $e);
    throw $e;
  }
}

function cdkey_delete($entity) {
  $transaction = db_transaction();
  try {
    module_invoke_all('cdkey_delete', $entity);
    entity_delete('cdkey', entity_id('cdkey', $entity));
  } catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('cdkey', $e);
    throw $e;
  }
}

function cdkey_use_save($cdkey_use) {
  if (!empty($cdkey_use->is_new)) {
    $cdkey_use->created = REQUEST_TIME;
  }
  $cdkey_use->changed = REQUEST_TIME;
  if ($cdkey_use->status == CDKEY_IS_USABLE) {
    $cdkey_use->status = CDKEY_IS_USING;
    module_invoke_all('cdkey_using', $cdkey_use);
    watchdog('cdkey use', t('cdkey %cdkey using.'), array('%cdkey' => $cdkey_use->sn));
  } else {
    $cdkey_use->status = CDKEY_IS_USED;
    module_invoke_all('cdkey_used', $cdkey_use);
    watchdog('cdkey use', t('cdkey %cdkey used.'), array('%cdkey' => $cdkey_use->sn));
  }
  return entity_save('cdkey_use', $cdkey_use);
}

function cdkey_type_load($type) {
  $types = cdkey_type_get_types();
  $type = str_replace('-', '_', $type);
  return isset($types[$type]) ? $types[$type] : FALSE;
}

function cdkey_type_save($type) {
  $is_existing = (bool) db_query_range('SELECT 1 FROM {cdkey_type} WHERE type = :type', 0, 1, array(':type' => $type->type))->fetchField();
  if ($is_existing) {
    drupal_write_record('cdkey_type', $type, 'type');
    module_invoke_all('cdkey_type_update', $type);
  } else {
    drupal_write_record('cdkey_type', $type);
    module_invoke_all('cdkey_type_insert', $type);
  }
  cdkey_type_cache_reset();
}

function cdkey_type_delete($type) {
  field_attach_delete_bundle('cdkey', $type->type);
  db_delete('cdkey_type')->condition('type', $type->type)->execute();
  module_invoke_all('cdkey_type_delete', $type);
  cdkey_type_cache_reset();
}

function cdkey_type_get_names() {
  return _cdkey_types_build()->names;
}

function cdkey_type_get_types() {
  return _cdkey_types_build(true)->types;
}

function cdkey_type_set_defaults($type) {
  if (!is_array($type)) {
    $type = (array) $type;
  }
  $type['data'] = is_string($type['data']) ? unserialize($type['data']) : $type['data'];
  return (object) $type;
}

function _cdkey_types_build($rebuild = FALSE) {
  $cid = 'cdkey_types:' . $GLOBALS['language']->language;
  if (!$rebuild) {
    $types = &drupal_static(__FUNCTION__);
    if (isset($types)) {
      return $types;
    }
    if ($cache = cache_get($cid)) {
      $types = $cache->data;
      return $types;
    }
  }
  $types = (object) array('names' => array(), 'types' => array());
  $types_hook = array();
  //定义 类型 hook
  foreach (module_implements('cdkey_info') as $module) {
    $info_array = module_invoke($module, 'cdkey_info');
    foreach ($info_array as $name => $type) {
      $type_hook = (array) cdkey_type_set_defaults($type);
      $type_hook['custom'] = FALSE;
      $type_hook['modified'] = FALSE;
      $types_hook[$type_hook['type']] = $type_hook;
    }
  }
  $types_db = array();
  $query = db_select('cdkey_type', 't')->fields('t')->orderBy('t.type', 'ASC');
  foreach ($query->execute() as $type_object) {
    $type_db = (array) cdkey_type_set_defaults($type_object);
    $type_db['custom'] = !isset($types_hook[$type_db['type']]);
    $type_db['modified'] = TRUE;
    $types_db[$type_db['type']] = $type_db;
  }
  $types_tmp = array_merge($types_hook, $types_db);
  asort($types_tmp);
  drupal_alter('cdkey_info', $types_tmp);
  foreach ($types_tmp as $name => $type) {
    $types->names[$name] = $type['name'];
    $types->types[$name] = cdkey_type_set_defaults($type);
  }
  cache_set($cid, $types);
  return $types;
}

function cdkey_type_cache_reset() {
  cache_clear_all('cdkey_types:', 'cache', TRUE);
  drupal_static_reset('_cdkey_types_build');
}

function template_preprocess_cdkey_use(&$variables) {
  $cdkey_type = $variables['cdkey_type'];

  if (isset($variables['cdkey']->sn)) {
    $variables['cdkey_info'] = entity_view('cdkey', array(entity_id('cdkey', $variables['cdkey']) => $variables['cdkey']), 'use');
  }

  $variables['classes_array'][] = 'cdkey-use';
  $variables['classes_array'][] = 'cdkey-use-' . $cdkey_type->type;

  $variables['theme_hook_suggestions'][] = 'cdkey_use__' . $cdkey_type->type;
}
