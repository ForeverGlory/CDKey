<?php

module_load_include('inc', 'cdkey');

/**
 * Implements hook_permission().
 */
function cdkey_permission() {
  $perms = array(
    'cdkey type administer' => array(
      'title' => t('CDKEY type Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey administer' => array(
      'title' => t('CDKEY Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey used administer' => array(
      'title' => t('CDKEY used Administer'),
      'restrict access' => TRUE,
    ),
    'cdkey use' => array(
      'title' => t('use CDKEY')
    )
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function cdkey_menu() {
  $items = array();
  $items['admin/cdkey'] = array(
    'title' => 'CDKEY',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_admin_page'),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
  );
  $items['admin/cdkey/list'] = array(
    'title' => 'CDKEY',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Base URI for dealing with entity.
  $base_uri = 'admin/cdkey/%cdkey';
  $base_uri_argument_position = 2;

  // URI for choosing bundle of entity to add.
  $items['admin/cdkey/add'] = array(
    'title' => 'Add CDKEY',
    'page callback' => 'cdkey_choose_bundle',
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // URI for viewing entity instances.
  $items[$base_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('cdkey', $base_uri_argument_position),
    'page callback' => 'cdkey_view',
    'page arguments' => array($base_uri_argument_position),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.pages.inc',
  );
  $items[$base_uri . '/view'] = array(
    'title' => 'View CDKEY',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // URI for editing entity instances.
  $items[$base_uri . '/edit'] = array(
    'title' => 'Edit CDKEY',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_form', $base_uri_argument_position),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  // URI for deleting entity instances.
  $items[$base_uri . '/delete'] = array(
    'title callback' => 'cdkey_label',
    'title arguments' => array($base_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_delete_form', $base_uri_argument_position),
    'access arguments' => array('cdkey administer'),
    'file' => 'cdkey.admin.inc',
  );

  $structure_path = 'admin/structure/cdkey';
  $items[$structure_path] = array(
    'title' => 'CDKEY types',
    'description' => 'Manage CDKEY types',
    'page callback' => 'cdkey_overview_types',
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.admin.inc',
  );

  $items[$structure_path . '/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$structure_path . '/add'] = array(
    'title' => 'Add CDKEY type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_type_form'),
    'access arguments' => array('cdkey type administer'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'cdkey.admin.inc',
  );

  $items[$structure_path . '/manage/%cdkey_type'] = array(
    'title' => 'Edit Inline Entity type',
    'title callback' => 'inline_entity_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cdkey_type_form', 4),
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.admin.inc',
  );
  $items[$structure_path . '/manage/%cdkey_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$structure_path . '/manage/%cdkey_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('cdkey_type_form_delete_confirm', 4),
    'access arguments' => array('cdkey type administer'),
    'file' => 'cdkey.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function cdkey_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cdkey') . '/includes/views',
  );
}

function cdkey_entity_info() {
  $info = array();
  $info['cdkey'] = array(
    'label' => t('CDKEY'),
    'base table' => 'cdkey',
    'entity keys' => array(
      'id' => 'cid',
      'label' => 'sn',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'entity class' => 'CDKEY',
    'controller class' => 'CDKEYController',
    'metadata controller class' => '',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'module' => 'cdkey',
  );
  $info['cdkey_used'] = array(
    'label' => t('CDKEY Used'),
    'base table' => 'cdkey_used',
    'entity keys' => array(
      'id' => 'cuid',
      'bundle' => 'type'
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'entity class' => 'CDKEYUsed',
    'controller class' => 'CDKEYUsedController',
    'metadata controller class' => '',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'module' => 'cdkey',
  );
  foreach (cdkey_type_get_names() as $type => $name) {
    $info['cdkey']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/cdkey/manage/%cdkey_type',
        'real path' => 'admin/structure/cdkey/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('cdkey type administer'),
      ),
    );
  }
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function cdkey_entity_property_info() {
  $info = array();
  $info['cdkey'] = array(
    'properties' => array(
      'id' => array(
        'type' => 'text',
        'schema field' => 'id',
        'label' => t('CDKEY ID'),
        'description' => t('CDKEY ID'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'sn' => array(
        'type' => 'text',
        'schema field' => 'sn',
        'label' => t('CDKEY SN'),
        'description' => t('CDKEY SN'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'keyt' => array(
        'type' => 'text',
        'schema field' => 'keyt',
        'label' => t('CDKEY Key'),
        'description' => t('CDKEY Key'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'type' => array(
        'type' => 'text',
        'schema field' => 'type',
        'required' => TRUE,
        'label' => t('CDKEY Type (bundle)'),
        'description' => t('CDKEY Type (bundle)'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'status' => array(
        'type' => 'integer',
        'schema field' => 'status',
        'required' => TRUE,
        'label' => t('CDKEY Status'),
        'description' => t('CDKEY Status'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'created' => array(
        'type' => 'integer',
        'schema field' => 'created',
        'required' => TRUE,
        'label' => t('CDKEY Create Time'),
        'description' => t('CDKEY Create Time'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
      'uid' => array(
        'type' => 'integer',
        'schema field' => 'uid',
        'required' => TRUE,
        'label' => t('CDKEY Create UserId'),
        'description' => t('CDKEY Create UserId'),
        'setter callback' => 'entity_property_verbatim_set',
      ),
    )
  );
  return $info;
}

function cdkey_load($cid, $reset = FALSE) {
  $entities = cdkey_load_multiple(array($cid), array(), $reset);
  return reset($entities);
}

function cdkey_sn_load($sn) {
  return cdkey_load_by_sn($sn);
}

function cdkey_load_by_sn($sn, $keyt = FALSE) {
  $conditions = array('sn' => $sn);
  if (!empty($keyt)) {
    $conditions['keyt'] = $keyt;
  }
  $entities = cdkey_load_multiple(FALSE, $conditions);
  return empty($entities) ? FALSE : reset($entities);
}

function cdkey_load_multiple($cids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($cids) && empty($conditions)) {
    return FALSE;
  }
  return entity_load('cdkey', $cids, $conditions, $reset);
}

function cdkey_save($entity) {
  $transaction = db_transaction();
  $entity->uid = $GLOBALS['user']->uid;
  $entity->created = REQUEST_TIME;
  try {
    module_invoke_all('cdkey_save', $entity);
    entity_save('cdkey', $entity);
  } catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('cdkey', $e);
    throw $e;
  }
}

function cdkey_delete($entity) {
  $transaction = db_transaction();
  try {
    module_invoke_all('cdkey_delete', $entity);
    entity_delete('cdkey', entity_id('cdkey', $entity));
  } catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('cdkey', $e);
    throw $e;
  }
}

function cdkey_type_load($type) {
  $types = cdkey_type_get_types();
  return $types[$type];
}

function cdkey_type_save($entity_type) {
  entity_save('cdkey_type', $entity_type);
}

function cdkey_type_delete($entity_type) {
  entity_delete('cdkey_type', entity_id('cdkey_type', $entity_type));
}

function cdkey_type_get_names() {
  return _cdkey_types_build()->names;
}

function cdkey_type_get_types() {
  return _cdkey_types_build()->types;
}

function cdkey_type_set_defaults($info) {
  return (array) $info;
}

function _cdkey_types_build($rebuild = FALSE) {
  $cid = 'cdkey_types:' . $GLOBALS['language']->language;
  if (!$rebuild) {
    $types = &drupal_static(__FUNCTION__);
    if (isset($types)) {
      return $types;
    }
    if ($cache = cache_get($cid)) {
      $types = $cache->data;
      return $types;
    }
  }
  $types = array();
  //定义 类型 hook
  foreach (module_implements('cdkey_info') as $module) {
    $info_array = module_invoke($module, 'cdkey_info');
    foreach ($info_array as $name => $type) {
      $type['modified'] = FALSE;
      $type['custom'] = FALSE;
      $types[$name] = cdkey_type_set_defaults($type);
    }
  }
  $query = db_select('cdkey_type', 't')->fields('t')->orderBy('t.type', 'ASC');
  foreach ($query->execute() as $type_object) {
    $type = cdkey_type_set_defaults($type_object);
    if (isset($types[$type['type']])) {
      $type['modified'] = TRUE;
    }
    $type['custom'] = TRUE;
    $types[$type['type']] = $type;
  }
  drupal_alter('cdkey_info', $types);
  asort($types);
  $names = array();
  foreach ($types as $name => $type) {
    $names[$name] = $type['name'];
  }
  $caches = (object) array('names' => $names, 'types' => $types);
  cache_set($cid, $caches);
  return $caches;
}
